# version: '3.8'

# services:
#   db:
#     image: postgres:13
#     env_file:
#       - './Backend/app/.env'
#     environment:

#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
#       POSTGRES_DB: ${POSTGRES_DB}

#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - backend-network
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
#       interval: 5s
#       timeout: 3s
#       retries: 5

#   web:
#     build:
#       context: ./Backend
#     volumes:
#       - ./Backend:/app
#     ports:
#       - "5000:5000"
#     depends_on:
#       - db
#     networks:
#       - backend-network

#   frontend:
#     build: ./my-app
#     ports:
#       - "3000:3000"
#     depends_on:
#       - web
#     networks:
#       - backend-network

# volumes:
#   postgres_data:

# networks:
#   backend-network:
#     driver: bridge

version: '3.8'

services:
  db:
    image: postgres:13
    env_file:
      - './Backend/app/.env'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    build:
      context: ./Backend
    volumes:
      - ./Backend:/app
    ports:
      - "5000:5000"
    depends_on:
      - db
    networks:
      - backend-network

  frontend:
    build: ./my-app
    ports:
      - "3000:3000"
    depends_on:
      - web
    networks:
      - backend-network

  admin:
    build:
      context: ./Backend
    ports:
      - "8000:5000"  # Flask-Admin будет доступен на порту 8000
    depends_on:
      - db
    networks:
      - backend-network
    command: ["python", "run.py"]

volumes:
  postgres_data:

networks:
  backend-network:
    driver: bridge